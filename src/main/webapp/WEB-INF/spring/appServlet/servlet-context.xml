<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/teaser/**" location="/resources/teaser/" />
	<resources mapping="/data/**" location="/resources/data/" />
	<resources mapping="/member/**" location="/resources/data/member/" />
	<!-- realPath 경로와 다름, 이건 브라우저의 url상 /는 context -->
	<resources mapping="/board/**" location="/resources/data/board/" />
	<resources mapping="/pds/**" location="/resources/data/pds/" />
	<resources mapping="/photo/**" location="/resources/data/photo/" />
	<resources mapping="/fileUpload/**" location="/resources/data/fileUpload/" />	
	<resources mapping="/ckeditor/**" location="/resources/ckeditor/" />
	<resources mapping="/study/**" location="/resources/data/study/" />
	<resources mapping="/qrCode/**" location="/resources/data/qrCode/" />
	<resources mapping="/thumbnail/**" location="/resources/data/thumbnail/" />
	<resources mapping="/product/**" location="/resources/data/dbShop/product/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- auto scan 아랫쪽에만 넣어주면됨(@Service or Component면 사용 가능) -->
	<context:component-scan base-package="com.spring.javaclassS" />
	
	<!-- Spring Security의 BCryptPasswordEncoder 객체를 Bean으로 등록 -->
	<beans:bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<!-- 파일 업로드에 필요한 라이드러리 객체를 bean에 등록 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 곱하기 쓰면 안됨 20mb -->
		<beans:property name="maxUploadSize" value="20971520" />
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>
	
	<!-- Transaction(트랜잭션) 어노테이션 처리를 위한 빈을 컨테이너에 등록처리 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<!-- 스프링 스케쥴러 생성(task Namespaces에서 추가했음) - 사용할 이름 지정 /사용하는 메모리에서 10% 정도 -->
	<task:scheduler id="jobScheduler" pool-size="10" />
	<!-- annotation 방식으로 쓸 것(호출해서 사용x 자동으로 실행) -->
	<task:annotation-driven scheduler="jobScheduler" />
	
</beans:beans>